// AI Response Service - Handles all AI response generation logic
export interface AssetContext {
  token?: string | null;
  poolId?: string | null;
  action?: string | null;
}

export interface UserContext {
  authenticated: boolean;
  walletAddress?: string;
}

export interface AIResponseContext {
  assetContext: AssetContext;
  userContext: UserContext;
  generateRandomAPY: (isLending?: boolean) => string;
  generateRandomBalance: (min: number, max: number) => string;
  generateRandomUtilization: () => string;
}

export class AIResponseService {
  async generateResponse(
    userMessage: string,
    context: AIResponseContext
  ): Promise<string> {
    const userLower = userMessage.toLowerCase();
    const { assetContext, userContext } = context;
    const hasAssetContext =
      assetContext.token && assetContext.poolId && assetContext.action;
    const actionText =
      assetContext.action === "borrow" ? "borrowing" : "lending";

    // Handle asset-specific queries first
    if (hasAssetContext && this.isConfirmationMessage(userLower)) {
      return this.handleConfirmationResponse(context);
    }

    if (hasAssetContext && this.isBalanceQuery(userLower)) {
      return this.handleBalanceQuery(context);
    }

    if (hasAssetContext && this.isRateQuery(userLower)) {
      return this.handleRateQuery(context);
    }

    if (this.isPriceQuery(userLower)) {
      return this.handlePriceQuery(userMessage, context);
    }

    if (this.isPortfolioQuery(userLower)) {
      return this.handlePortfolioQuery(context);
    }

    if (this.isInvestmentQuery(userLower)) {
      return this.handleInvestmentQuery(context);
    }

    if (this.isTrendingQuery(userLower)) {
      return this.handleTrendingQuery();
    }

    if (this.isETHBuyQuery(userLower)) {
      return this.handleETHBuyQuery(context);
    }

    // Default response
    return this.handleDefaultResponse(userMessage, context);
  }

  private isConfirmationMessage(userLower: string): boolean {
    return (
      userLower.includes("yes") ||
      userLower.includes("proceed") ||
      userLower.includes("continue")
    );
  }

  private isBalanceQuery(userLower: string): boolean {
    return userLower.includes("balance") || userLower.includes("collateral");
  }

  private isRateQuery(userLower: string): boolean {
    return (
      userLower.includes("rate") ||
      userLower.includes("apy") ||
      userLower.includes("interest")
    );
  }

  private isPriceQuery(userLower: string): boolean {
    return (
      userLower.includes("price") ||
      userLower.includes("bitcoin") ||
      userLower.includes("btc")
    );
  }

  private isPortfolioQuery(userLower: string): boolean {
    return userLower.includes("portfolio");
  }

  private isInvestmentQuery(userLower: string): boolean {
    return userLower.includes("invest") || userLower.includes("$100");
  }

  private isTrendingQuery(userLower: string): boolean {
    return userLower.includes("trending") || userLower.includes("memecoin");
  }

  private isETHBuyQuery(userLower: string): boolean {
    return (
      userLower.includes("buy") ||
      userLower.includes("ethereum") ||
      userLower.includes("eth")
    );
  }

  private handleConfirmationResponse(context: AIResponseContext): string {
    const { assetContext, userContext, generateRandomAPY } = context;
    const actionText =
      assetContext.action === "borrow" ? "borrowing" : "lending";

    if (!userContext.authenticated || !userContext.walletAddress) {
      return `Great! Let me help you get started with ${actionText} ${assetContext.token?.toUpperCase()}.

‚ö†Ô∏è **Wallet Connection Required**
To proceed with ${actionText}, I need to connect to your wallet first.

**What happens next:**
1. Click "Connect Wallet" in the top bar
2. I'll verify your ${
        assetContext.action === "borrow"
          ? "collateral"
          : `${assetContext.token?.toUpperCase()} balance`
      }
3. Show you the ${actionText} terms for Pool ${assetContext.poolId}
4. Execute the transaction

Would you like me to guide you through the wallet connection process?`;
    } else {
      const randomAPY = generateRandomAPY(assetContext.action !== "borrow");
      return `Perfect! Let's proceed with ${actionText} ${assetContext.token?.toUpperCase()} from Pool ${
        assetContext.poolId
      }.

‚úÖ **Transaction Details:**
‚Ä¢ Wallet: ${userContext.walletAddress.slice(
        0,
        6
      )}...${userContext.walletAddress.slice(-4)}
‚Ä¢ Asset: ${assetContext.token?.toUpperCase()}
‚Ä¢ Pool: ${assetContext.poolId}
‚Ä¢ Action: ${actionText.charAt(0).toUpperCase() + actionText.slice(1)}
‚Ä¢ ${assetContext.action === "borrow" ? "Interest Rate" : "APY"}: ${randomAPY}%

üìã **Next Steps:**
1. ‚úì Wallet connected
2. ‚è≥ Checking ${
        assetContext.action === "borrow"
          ? "collateral requirements"
          : "available balance"
      }...
3. ‚è≥ Preparing transaction parameters
4. ‚è≥ Ready for your final confirmation

*This is a demo environment. In production, this would execute a real ${actionText} transaction.*

Would you like me to show you the final transaction summary?`;
    }
  }

  private handleBalanceQuery(context: AIResponseContext): string {
    const { assetContext, userContext, generateRandomBalance } = context;
    const actionText =
      assetContext.action === "borrow" ? "borrowing" : "lending";

    if (!userContext.authenticated) {
      return `I'd love to check your ${
        assetContext.action === "borrow" ? "collateral" : "balance"
      } for ${actionText} ${assetContext.token?.toUpperCase()}, but I need wallet access first.

Connect your wallet and I'll show you:
‚Ä¢ Your current ${
        assetContext.action === "borrow"
          ? "collateral positions"
          : `${assetContext.token?.toUpperCase()} balance`
      }
‚Ä¢ ${
        assetContext.action === "borrow"
          ? "Available borrowing capacity"
          : "Lending capacity"
      }
‚Ä¢ Pool utilization and rates
‚Ä¢ Transaction requirements`;
    } else {
      const randomBalance = generateRandomBalance(100, 1000);
      return `üìä **${
        assetContext.action === "borrow" ? "Collateral" : "Balance"
      } Check for Pool ${assetContext.poolId}**

${
  assetContext.action === "borrow"
    ? `üí∞ **Your Collateral:**
‚Ä¢ Total Collateral Value: $${randomBalance}
‚Ä¢ Available to Borrow: $${(parseFloat(randomBalance) * 0.7).toFixed(2)}
‚Ä¢ Health Factor: 2.3 (Healthy)
‚Ä¢ Max ${assetContext.token?.toUpperCase()} Borrow: ${(
        parseFloat(randomBalance) * 0.001
      ).toFixed(4)} ${assetContext.token?.toUpperCase()}`
    : `üíé **Your ${assetContext.token?.toUpperCase()} Balance:**
‚Ä¢ Available Balance: ${(parseFloat(randomBalance) * 0.01).toFixed(
        4
      )} ${assetContext.token?.toUpperCase()}
‚Ä¢ USD Value: $${randomBalance}
‚Ä¢ Max Lending Amount: ${(parseFloat(randomBalance) * 0.009).toFixed(
        4
      )} ${assetContext.token?.toUpperCase()}
‚Ä¢ Estimated Annual Yield: $${(parseFloat(randomBalance) * 0.08).toFixed(2)}`
}

Ready to proceed with ${actionText}?`;
    }
  }

  private handleRateQuery(context: AIResponseContext): string {
    const { assetContext, generateRandomAPY, generateRandomUtilization } =
      context;
    const rate = generateRandomAPY(assetContext.action !== "borrow");

    return `üìà **${
      assetContext.action === "borrow" ? "Interest Rates" : "APY Rates"
    } for ${assetContext.token?.toUpperCase()} - Pool ${assetContext.poolId}**

${
  assetContext.action === "borrow"
    ? `üí∏ **Borrowing Rates:**
‚Ä¢ Current Rate: ${rate}% APR
‚Ä¢ Rate Type: Variable
‚Ä¢ Collateral Ratio: 150%
‚Ä¢ Liquidation Threshold: 80%

**Rate Factors:**
‚Ä¢ Pool utilization: ${generateRandomUtilization()}%
‚Ä¢ Available liquidity: High
‚Ä¢ Market volatility: Moderate`
    : `üí∞ **Lending APY:**
‚Ä¢ Current APY: ${rate}%
‚Ä¢ Compounding: Daily
‚Ä¢ Pool Utilization: ${generateRandomUtilization()}%
‚Ä¢ Risk Level: Low-Medium

**APY Breakdown:**
‚Ä¢ Base Rate: ${(parseFloat(rate) * 0.7).toFixed(2)}%
‚Ä¢ Utilization Bonus: ${(parseFloat(rate) * 0.3).toFixed(2)}%
‚Ä¢ Platform Rewards: Potential additional yields`
}

These are competitive rates! Would you like to proceed with ${
      assetContext.action === "borrow" ? "borrowing" : "lending"
    }?`;
  }

  private handlePriceQuery(
    userMessage: string,
    context: AIResponseContext
  ): string {
    const { assetContext, generateRandomAPY } = context;

    if (assetContext.token?.toLowerCase() === "btc") {
      return `Bitcoin (BTC) is currently trading at approximately $43,250.

Since you're here to ${assetContext.action} BTC from Pool ${
        assetContext.poolId
      }, here's what's relevant:
‚Ä¢ Current BTC Price: $43,250
‚Ä¢ ${
        assetContext.action === "borrow" ? "Borrowing" : "Lending"
      } this asset at current prices
‚Ä¢ Pool liquidity: High
‚Ä¢ ${
        assetContext.action === "borrow"
          ? `Interest Rate: ${generateRandomAPY(false)}%`
          : `Current APY: ${generateRandomAPY(true)}%`
      }

Ready to proceed with ${
        assetContext.action === "borrow" ? "borrowing" : "lending"
      } BTC?`;
    } else {
      return "Bitcoin (BTC) is currently trading at approximately $43,250. The price has shown strong momentum recently with increased institutional adoption. Would you like me to help you buy some Bitcoin or analyze its technical indicators?";
    }
  }

  private handlePortfolioQuery(context: AIResponseContext): string {
    const { userContext } = context;

    if (!userContext.authenticated || !userContext.walletAddress) {
      return "I'd be happy to analyze your portfolio! To provide the most accurate analysis, I'll need to connect to your wallet first. This will allow me to:\n\n‚Ä¢ View your current holdings\n‚Ä¢ Calculate your total balance\n‚Ä¢ Identify optimization opportunities\n‚Ä¢ Suggest rebalancing strategies\n\nWould you like me to guide you through connecting your wallet?";
    } else {
      return `Great! I can see your wallet is connected (${userContext.walletAddress.slice(
        0,
        6
      )}...${userContext.walletAddress.slice(
        -4
      )}). Let me analyze your portfolio:\n\nüìä **Portfolio Analysis**\n‚Ä¢ Scanning your holdings across supported chains...\n‚Ä¢ Calculating total balance and allocation...\n‚Ä¢ Identifying yield opportunities...\n\nüí° **Initial Recommendations:**\n‚Ä¢ Consider diversifying across DeFi protocols\n‚Ä¢ Look into staking opportunities for better yields\n‚Ä¢ Monitor gas fees for optimal transaction timing\n\nWould you like me to dive deeper into any specific aspect of your portfolio?`;
    }
  }

  private handleInvestmentQuery(context: AIResponseContext): string {
    const { assetContext, generateRandomAPY } = context;

    if (assetContext.token && assetContext.poolId && assetContext.action) {
      const actionText =
        assetContext.action === "borrow" ? "borrowing" : "lending";
      return `For ${actionText} ${assetContext.token?.toUpperCase()} from Pool ${
        assetContext.poolId
      }, here's my recommendation:

üí° **${actionText.charAt(0).toUpperCase() + actionText.slice(1)} Strategy:**
${
  assetContext.action === "borrow"
    ? `‚Ä¢ Borrow conservatively (max 60% of available)
‚Ä¢ Monitor your health factor regularly
‚Ä¢ Have an exit strategy ready
‚Ä¢ Consider borrowing costs vs. investment returns`
    : `‚Ä¢ Start with a smaller amount to test the pool
‚Ä¢ Monitor APY changes and pool performance
‚Ä¢ Consider compounding your yields
‚Ä¢ Diversify across multiple pools for lower risk`
}

Current ${
        assetContext.action === "borrow" ? "borrowing rate" : "APY"
      }: ${generateRandomAPY(assetContext.action !== "borrow")}%

Would you like me to help you proceed with this strategy?`;
    } else {
      return "Great question! For a $100 investment, I'd recommend considering these strategies:\n\nüü¢ **Conservative (Low Risk)**\n‚Ä¢ 60% USDC staking (4-6% APY)\n‚Ä¢ 40% ETH (for growth potential)\n\nüü° **Moderate (Medium Risk)**\n‚Ä¢ 40% ETH\n‚Ä¢ 30% BTC\n‚Ä¢ 30% High-yield DeFi protocols\n\nüî¥ **Aggressive (High Risk)**\n‚Ä¢ 50% Promising altcoins\n‚Ä¢ 30% DeFi yield farming\n‚Ä¢ 20% Emerging protocols\n\nWhat's your risk tolerance and investment timeline?";
    }
  }

  private handleTrendingQuery(): string {
    return "Here are the trending memecoins right now:\n\nüî• **Top Performers (24h)**\n‚Ä¢ PEPE (+15.2%) - Frog-themed token\n‚Ä¢ DOGE (+8.7%) - The original memecoin\n‚Ä¢ SHIB (+12.3%) - Dogecoin killer\n‚Ä¢ BONK (+22.1%) - Solana's dog token\n\n‚ö†Ô∏è **Risk Warning**: Memecoins are highly volatile and speculative. Only invest what you can afford to lose. Would you like me to help you research any specific token or set up price alerts?";
  }

  private handleETHBuyQuery(context: AIResponseContext): string {
    const { assetContext, userContext, generateRandomAPY } = context;

    if (assetContext.token?.toLowerCase() === "eth") {
      const actionText =
        assetContext.action === "borrow" ? "borrowing" : "lending";

      if (!userContext.authenticated || !userContext.walletAddress) {
        return `Perfect! You want to ${assetContext.action} ETH from Pool ${
          assetContext.poolId
        }. Let me help you with that.

To proceed with ${actionText} Ethereum, I'll need to connect to your wallet first:

üìã **What I'll do next:**
1. Connect your wallet
2. Check your ${assetContext.action === "borrow" ? "collateral" : "ETH balance"}
3. Show you the ${actionText} terms
4. Execute the transaction

Should I guide you through the wallet connection?`;
      } else {
        return `Excellent! Your wallet is connected and you want to ${
          assetContext.action
        } ETH from Pool ${assetContext.poolId}.

üìã **ETH ${actionText.charAt(0).toUpperCase() + actionText.slice(1)} Summary:**
‚Ä¢ Wallet: ${userContext.walletAddress.slice(
          0,
          6
        )}...${userContext.walletAddress.slice(-4)}
‚Ä¢ Asset: Ethereum (ETH)
‚Ä¢ Pool: ${assetContext.poolId}
‚Ä¢ ${
          assetContext.action === "borrow" ? "Interest Rate" : "Current APY"
        }: ${generateRandomAPY(assetContext.action !== "borrow")}%

‚úÖ **Ready to Execute:**
1. ‚úì Wallet connected
2. ‚è≥ Preparing ETH ${actionText} transaction...
3. ‚è≥ Awaiting your confirmation

Would you like me to proceed with this ETH ${actionText} transaction?`;
      }
    } else {
      if (!userContext.authenticated || !userContext.walletAddress) {
        return "I can help you buy $100 worth of Ethereum on Base! Here's what I'll do:\n\nüìã **Transaction Summary**\n‚Ä¢ Amount: $100 USD\n‚Ä¢ Asset: Ethereum (ETH)\n‚Ä¢ Network: Base\n‚Ä¢ Est. ETH: ~0.045 ETH\n‚Ä¢ Gas fees: ~$2-5\n\nTo proceed, I'll need to:\n1. Connect your wallet\n2. Confirm the transaction details\n3. Execute the swap\n\nShould I start the wallet connection process?";
      } else {
        return `Perfect! Your wallet is connected. I can help you buy $100 worth of Ethereum on Base.\n\nüìã **Transaction Summary**\n‚Ä¢ From wallet: ${userContext.walletAddress.slice(
          0,
          6
        )}...${userContext.walletAddress.slice(
          -4
        )}\n‚Ä¢ Amount: $100 USD\n‚Ä¢ Asset: Ethereum (ETH)\n‚Ä¢ Network: Base\n‚Ä¢ Est. ETH: ~0.045 ETH\n‚Ä¢ Gas fees: ~$2-5\n\n‚úÖ **Ready to Execute:**\n1. ‚úì Wallet connected\n2. ‚è≥ Preparing transaction...\n3. ‚è≥ Awaiting your confirmation\n\n*Note: This is a demo. In production, this would execute a real transaction.*\n\nWould you like me to proceed with this transaction?`;
      }
    }
  }

  private handleDefaultResponse(
    userMessage: string,
    context: AIResponseContext
  ): string {
    const { assetContext } = context;

    if (assetContext.token && assetContext.poolId && assetContext.action) {
      const actionText =
        assetContext.action === "borrow" ? "borrowing" : "lending";

      return `I understand you're asking about "${userMessage}". 

Since you're here to ${
        assetContext.action
      } ${assetContext.token?.toUpperCase()} from Pool ${
        assetContext.poolId
      }, I can help you with:

üéØ **${assetContext.token?.toUpperCase()} ${
        actionText.charAt(0).toUpperCase() + actionText.slice(1)
      } Actions:**
‚Ä¢ Check ${
        assetContext.action === "borrow"
          ? "collateral requirements"
          : "current balance"
      }
‚Ä¢ Show ${
        assetContext.action === "borrow" ? "interest rates" : "APY rates"
      } for this pool
‚Ä¢ Execute the ${actionText} transaction
‚Ä¢ Monitor your position after ${actionText}

üí¨ **General Crypto Help:**
‚Ä¢ Portfolio analysis and optimization
‚Ä¢ Market insights and price analysis
‚Ä¢ Cross-chain transaction guidance
‚Ä¢ DeFi strategy recommendations

What would you like me to help you with regarding your ${assetContext.token?.toUpperCase()} ${actionText}?`;
    } else {
      return `I understand you're asking about "${userMessage}". I'm here to help you with crypto trading, portfolio analysis, market insights, and DeFi strategies across multiple chains.\n\nI can assist you with:\n‚Ä¢ Buying/selling crypto\n‚Ä¢ Portfolio optimization\n‚Ä¢ Market analysis\n‚Ä¢ Cross-chain transactions\n‚Ä¢ DeFi yield strategies\n\nWhat specific crypto-related task would you like help with?`;
    }
  }

  // Simulate API delay for realistic UX
  async delay(min = 1000, max = 3000): Promise<void> {
    const delayTime = Math.random() * (max - min) + min;
    return new Promise((resolve) => setTimeout(resolve, delayTime));
  }
}
